package org.piaohao.redisManager;

import com.alee.extended.image.WebImage;
import com.alee.laf.label.WebLabel;
import com.alee.laf.text.WebTextField;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Data;
import org.piaohao.redisManager.table.HashTableInit;
import org.piaohao.redisManager.table.TableData;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.util.Arrays;
import java.util.Map;

@Data
public class HashPanel {
    private JButton refreshBtn;
    private JButton createBtn;
    private JButton deleteBtn;
    private JButton updateBtn;
    private WebTextField searchField;
    private JPanel rootPanel;
    private JPanel tablePanelWrapper;
    private WebLabel countLabel;

    private TablePanel<Map.Entry<String, String>> tablePanel;
    private JFrame frame;
    private String key;

    public HashPanel(JFrame frame, String key) {
        this.frame = frame;
        this.key = key;

        $$$setupUI$$$();
        refreshBtn.addActionListener(e -> tablePanel.refresh());
        deleteBtn.addActionListener(e -> {
            JTable table = tablePanel.getTable();
            int[] rows = table.getSelectedRows();
            Arrays.stream(rows)
                    .forEach(r -> {
                        String filed = (String) table.getValueAt(r, 1);
                        RedisManager.client.HASH.hdel(key, filed);
                    });
            JOptionPane.showMessageDialog(frame, "删除成功");
            tablePanel.refresh();
        });
        updateBtn.addActionListener(e -> {
            JTable table = tablePanel.getTable();
            int row = table.getEditingRow();
            int column = table.getEditingColumn();
            updateKeyValue(table, row, column);
        });
        createBtn.addActionListener(e -> {
            JTable table = tablePanel.getTable();
            ((DefaultTableModel) table.getModel()).addRow(new String[3]);
            table.scrollRectToVisible(table.getCellRect(table.getRowCount() - 1, 0, true));
        });

        tablePanel = new TablePanel<>(frame, RedisManager.queryHash(key, "*"), new HashTableInit(this));
        tablePanelWrapper.add(tablePanel.getRootPanel(), BorderLayout.CENTER);
        JTable table = tablePanel.getTable();
        table.getModel().addTableModelListener(e -> updateKeyValue(table, e.getFirstRow(), e.getColumn()));
    }

    private void createUIComponents() {
        searchField = new WebTextField(20);
        searchField.setInputPrompt("输入关键字,根据Key搜索...");
        searchField.setMargin(0, 0, 0, 2);
        URL resource = getClass().getResource("/images/searchbox_button.png");
        searchField.setTrailingComponent(new WebImage(new ImageIcon(resource)));
        searchField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    tablePanel.refresh();
                }
            }
        });

        countLabel = new WebLabel();
    }

    public TableData<Map.Entry<String, String>> refreshClientList() {
        if (!RedisManager.start) {
            JOptionPane.showMessageDialog(frame, "请选择会话");
            return null;
        }
        TableData<Map.Entry<String, String>> totalKvs = RedisManager.queryHash(key, "*");
        countLabel.setText("总数: " + totalKvs.getTotalKeys().size());
        return totalKvs;
    }

    private void updateKeyValue(JTable table, int row, int column) {
        if (column < 0) {
            return;
        }
        String selectKey = null, selectValue = null;
        if (column == 1) {
            selectKey = (String) table.getValueAt(row, column);
            selectValue = (String) table.getValueAt(row, column + 1);
        } else {
            selectKey = (String) table.getValueAt(row, column - 1);
            selectValue = (String) table.getValueAt(row, column);
        }
        int tag = JOptionPane.showConfirmDialog(frame, "修改键值", "是否确认修改", JOptionPane.OK_CANCEL_OPTION);
        if (tag == JOptionPane.CANCEL_OPTION) {
            return;
        }
        RedisManager.client.HASH.hset(key, selectKey, selectValue);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 7, new Insets(5, 5, 5, 5), -1, -1));
        panel1.setBackground(new Color(-657931));
        rootPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        refreshBtn = new JButton();
        refreshBtn.setText("刷新");
        panel1.add(refreshBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        createBtn = new JButton();
        createBtn.setText("新建");
        panel1.add(createBtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteBtn = new JButton();
        deleteBtn.setText("删除");
        panel1.add(deleteBtn, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateBtn = new JButton();
        updateBtn.setText("提交更改");
        panel1.add(updateBtn, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(searchField, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.add(countLabel, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        tablePanelWrapper = new JPanel();
        tablePanelWrapper.setLayout(new BorderLayout(0, 0));
        rootPanel.add(tablePanelWrapper, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
