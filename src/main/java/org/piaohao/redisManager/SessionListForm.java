package org.piaohao.redisManager;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Data;

import javax.swing.*;
import javax.swing.plaf.basic.BasicListUI;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

@Data
public class SessionListForm {
    private JPanel rootPanel;
    private JList<Session> clientList;
    private JButton connectBtn;
    private JButton closeBtn;

    private JDialog dialog;
    private MainPanel mainPanel;

    private int mHoveredJListIndex = -1;

    public SessionListForm(JDialog dialog, MainPanel mainPanel) {
        this.dialog = dialog;
        this.mainPanel = mainPanel;
        List<Session> sessions = SessionService.getInstance().all();
        DefaultListModel<Session> listModel = new DefaultListModel<>();
        for (Session session : sessions) {
            listModel.addElement(session);
        }
        clientList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        clientList.setModel(listModel);
        clientList.setUI(new CustomUI());
        clientList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Session entry = (Session) value;
                setText(entry.getAddress() + ":" + entry.getPort());
                if (mHoveredJListIndex == index) {
                    setBackground(new Color(0, 0, 128));
                    setForeground(Color.white);
                    ((CustomUI) list.getUI()).setCellHeight(index, 40, 30);
                } else {
                    setBackground(Color.white);
                    setForeground(Color.black);
                    ((CustomUI) list.getUI()).setCellHeight(index, 30);
                }
                return this;
            }
        });
        clientList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                    connect();
                }
            }
        });
        clientList.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int index = clientList.locationToIndex(e.getPoint());
                if (index != mHoveredJListIndex) {
                    mHoveredJListIndex = index;
                    clientList.repaint();
                }
            }
        });
        closeBtn.addActionListener(e -> dialog.setVisible(false));
        connectBtn.addActionListener(e -> connect());
    }

    private void connect() {
        Session selectedValue = clientList.getSelectedValue();
        if (selectedValue == null) {
            JOptionPane.showMessageDialog(dialog, "请选择会话");
            return;
        }
        RedisManager.init(selectedValue.getAddress(), selectedValue.getPort(), selectedValue.getPassword());
        mainPanel.getAddressLabel().setText("当前连接信息:  " + selectedValue.getAddress() + ":" + selectedValue.getPort());
        dialog.setVisible(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        clientList = new JList();
        scrollPane1.setViewportView(clientList);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(5, 5, 5, 5), -1, -1));
        rootPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        connectBtn = new JButton();
        connectBtn.setText("连接");
        panel1.add(connectBtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        closeBtn = new JButton();
        closeBtn.setText("关闭");
        panel1.add(closeBtn, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    class CustomUI extends BasicListUI {
        public CustomUI() {
            super();
            cellHeights = new int[2];
        }

        public void setCellHeight(int index, int value, int defaultHeight) {
            for (int i = 0; i < cellHeights.length; i++) {
                cellHeights[i] = defaultHeight;
            }
            cellHeights[index] = value;
        }

        void setCellHeight(int index, int i) {
            cellHeights[index] = i;
        }
    }
}
