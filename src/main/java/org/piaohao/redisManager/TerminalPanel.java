package org.piaohao.redisManager;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Data;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

@Data
public class TerminalPanel {
    private JTextArea displayArea;
    private JTextArea commandArea;
    private JButton executeBtn;
    private JButton resetBtn;
    private JPanel rootPanel;
    private JButton closeBtn;

    private JFrame frame;
    private RedisClient redisClient;

    private String command;

    public TerminalPanel(JFrame frame, MainPanel mainPanel) {
        this.frame = frame;

        closeBtn.addActionListener(e -> mainPanel.getTabbedPane1().remove(rootPanel));
        resetBtn.addActionListener(e -> displayArea.setText(initialMsg));
        executeBtn.addActionListener(e -> executeCommand());
        commandArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && e.isControlDown()) {
                    executeCommand();
                }
            }
        });

        String address = RedisManager.address;
        Integer port = RedisManager.port;
        redisClient = new RedisClient(address, port, RedisManager.password,
                result -> displayArea.setText(displayArea.getText() + "\n" + address + ":" + port + ">" + command + "\n" + result));
        new Thread(redisClient).start();
    }

    private void executeCommand() {
        command = commandArea.getText();
        redisClient.send(command);
    }

    private String initialMsg = "=====================================================================================\n  欢迎进入Command，请从底部输入框内输入要执行的命令，按Ctrl+Enter运行.\n  =====================================================================================";

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        commandArea = new JTextArea();
        rootPanel.add(commandArea, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 80), new Dimension(-1, 80), 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 4, new Insets(5, 5, 5, 5), -1, -1));
        rootPanel.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        executeBtn = new JButton();
        executeBtn.setText("执行(Crtl+Enter)");
        panel1.add(executeBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        resetBtn = new JButton();
        resetBtn.setText("清空屏幕");
        panel1.add(resetBtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        closeBtn = new JButton();
        closeBtn.setText("关闭");
        panel1.add(closeBtn, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        displayArea = new JTextArea();
        displayArea.setBackground(new Color(-16777216));
        displayArea.setEditable(false);
        displayArea.setForeground(new Color(-11141291));
        displayArea.setText("===================================================================================== \n欢迎进入Command，请从底部输入框内输入要执行的命令，按Ctrl+Enter运行. \n=====================================================================================");
        scrollPane1.setViewportView(displayArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
